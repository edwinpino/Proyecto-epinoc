version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0   # Imagen oficial de Confluent para Zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"                          # Puerto de Zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181            # Puerto por defecto de clientes
      ZOOKEEPER_TICK_TIME: 2000              # Tiempo base de sincronizaciÃ³n

  kafka1:
    image: confluentinc/cp-kafka:7.5.0       # Imagen oficial de Kafka
    container_name: kafka1
    ports:
      - "9092:9092"                          # Puerto externo para clientes
      - "29092:29092"                        # Puerto interno (para otros contenedores)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Listeners
      KAFKA_LISTENERS: BROKER://:9092,PLAINTEXT_INTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka1:9092,PLAINTEXT_INTERNAL://kafka1:29092

      # ConfiguraciÃ³n comÃºn
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper   # Kafka necesita que Zookeeper estÃ© arriba primero

  kafka2:
    image: confluentinc/cp-kafka:7.5.0       # Imagen oficial de Kafka
    container_name: kafka2
    ports:
      - "9093:9093"                          # Puerto externo para clientes
      - "29093:29093"                        # Puerto interno (para otros contenedores)
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Listeners
      KAFKA_LISTENERS: BROKER://:9093,PLAINTEXT_INTERNAL://:29093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka2:9093,PLAINTEXT_INTERNAL://kafka2:29093

      # ConfiguraciÃ³n comÃºn
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper   # Kafka necesita que Zookeeper estÃ© arriba primero

  kafka3:
    image: confluentinc/cp-kafka:7.5.0       # Imagen oficial de Kafka
    container_name: kafka3
    ports:
      - "9094:9094"                          # Puerto externo para clientes
      - "29094:29094"                        # Puerto interno (para otros contenedores)
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Listeners
      KAFKA_LISTENERS: BROKER://:9094,PLAINTEXT_INTERNAL://:29094
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka3:9094,PLAINTEXT_INTERNAL://kafka3:29094

      # ConfiguraciÃ³n comÃºn
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper   # Kafka necesita que Zookeeper estÃ© arriba primero

  kafdrop:
    image: obsidiandynamics/kafdrop:latest #Imagen Base de kafdrop, interfaz grafica de kafka
    container_name: kafdrop
    ports:
      - "9000:9000"   # Abres en el navegador: http://localhost:9000
    environment:
      KAFKA_BROKERCONNECT: "kafka1:29092,kafka2:29093,kafka3:29094"
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  # Balanceador que expone el cluster por un solo puerto
  haproxy:
    image: haproxy:2.9
    container_name: haproxy
    ports:
      - "9095:9095"   # te conectas a este puerto y entras al cluster
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  connect:
    build: . 
    container_name: connect
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:29092,kafka2:29093,kafka3:29094"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"

    depends_on:
      - kafka1
      - kafka2
      - kafka3
      
  postgres:
    image: docker.io/library/postgres:15
    container_name: postgres
    hostname: postgres
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      POSTGRES_DB: demo
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      # Descomenta para crear objetos la primera vez:
      - ./initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default


  # (Opcional) UI web para administrar Postgres
  pgadmin:
    image: docker.io/dpage/pgadmin4:8.10
    container_name: pgadmin
    hostname: pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8081:80"
    networks:
      - default

      
  init-connect:
    image: curlimages/curl:latest
    container_name: init-connect
    depends_on:
      connect:
        condition: service_healthy
    volumes:
      - ./jdbc_sink_invoices_topic.json:/config/jdbc_sink_invoices_topic.json
      - ./init-connect.sh:/init-connect.sh
    entrypoint: ["/bin/sh", "/init-connect.sh"]
    networks:
      - default

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    hostname: grafana
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - default

  producer:
    image: edenhill/kcat:1.7.1
    container_name: kafka-producer
    depends_on:
      - haproxy
    volumes:
      - ./producer/producer.sh:/app/producer.sh:ro
    working_dir: /app
    entrypoint: ["/bin/sh", "/app/producer.sh"]
    networks:
      - default

  spark:
    image: apache/spark:3.5.0
    container_name: spark
    hostname: spark
    user: root  # ðŸ‘ˆ AÃ±adido: ejecuta como root para tener permisos en /opt/spark
    environment:
      - IVY_HOME=/opt/spark/.ivy2
    command: >
      bash -c "
      mkdir -p /opt/spark/.ivy2/cache &&
      chmod -R 777 /opt/spark/.ivy2 &&
      /opt/spark/bin/spark-submit
      --master local[*]
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.postgresql:postgresql:42.7.3
      /spark/stream_invoices.py"
    volumes:
      - ./spark:/spark:Z
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - postgres
    networks:
      - default
